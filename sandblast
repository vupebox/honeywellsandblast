/*
  Modbus RTU Server LED

  This sketch creates a Modbus RTU Server with a simulated coil.
  The value of the simulated coil is set on the LED

  Circuit:
   - MKR board
   - MKR 485 shield
     - ISO GND connected to GND of the Modbus RTU server
     - Y connected to A/Y of the Modbus RTU client
     - Z connected to B/Z of the Modbus RTU client
     - Jumper positions
       - FULL set to OFF
       - Z \/\/ Y set to OFF

  created 16 July 2018
  by Sandeep Mistry
*/

#include <ArduinoRS485.h> // ArduinoModbus depends on the ArduinoRS485 library
#include <ArduinoModbus.h>
#include <Controllino.h> 

#define pin_motor_1 1
#define pin_e1_1 2
#define pin_e2_1 3
#define pin_motor_2 4
#define pin_e1_2 5
#define pin_e2_2 6


/////////////// don't edit //////////////
#define state_stop 0
#define state_motor_active 1
#define state_e1_active 2
#define state_e2_active 3
#define state_e2_deactive 4
#define state_e1_deactive 5
#define state_motor_deactive 6
#define state_uknow 7

uint8_t machine_current_state = state_stop;
uint8_t machine_next_state = state_stop;

const int ledPin = LED_BUILTIN;

struct timing {
  uint16_t timing1;
  uint16_t timing2;
  uint16_t timing3;
};

struct status {
  bool stop;
  bool start;
  bool running;
  bool system;
  bool current_system;
  uint8_t status;
};

struct timing mytiming;
struct status mystatus;
unsigned long next_time = 0;
uint8_t pin_motor;
uint8_t pin_e1;
uint8_t pin_e2;


void setup() {
  Serial.begin(9600);

  mytiming.timing1 = 5;
  mytiming.timing2 = 5;
  mytiming.timing3 = 5;
  mystatus.stop = true;
  mystatus.start = false;
  mystatus.running = false;
  mystatus.system = 0;
  mystatus.status = 0;
  pinMode(pin_motor_1, OUTPUT);
  pinMode(pin_e1_1, OUTPUT);
  pinMode(pin_e2_1, OUTPUT);
  pinMode(pin_motor_2, OUTPUT);
  pinMode(pin_e1_2, OUTPUT);
  pinMode(pin_e2_2, OUTPUT);

  // start the Modbus RTU server, with (slave) id 1
  if (!ModbusRTUServer.begin(1, 9600)) {
    Serial.println("Failed to start Modbus RTU Server!");
    digitalWrite(ledPin, HIGH);
    while (1);
  }

  // configure the LED
 
  digitalWrite(ledPin, LOW);

  // configure a single coil at address 0x00
  ModbusRTUServer.configureCoils(0x00, 4);
   // configure holding registers at address 0x00
  ModbusRTUServer.configureHoldingRegisters(0x00, 3);
  // configure discrete inputs at address 0x00
  ModbusRTUServer.configureDiscreteInputs(0x00, 4);
  // configure input registers at address 0x00
  ModbusRTUServer.configureInputRegisters(0x00, 3);
}

void loop() { 
  getParameters();
  machineState();
  machineActions();
}

void getParameters(){
  ModbusRTUServer.discreteInputWrite(0x00,mystatus.stop);
  ModbusRTUServer.discreteInputWrite(0x01,mystatus.start);
  ModbusRTUServer.discreteInputWrite(0x02,mystatus.running);
  ModbusRTUServer.discreteInputWrite(0x03,mystatus.system);
  ModbusRTUServer.inputRegisterWrite(0x00,mytiming.timing1);
  ModbusRTUServer.inputRegisterWrite(0x01,mytiming.timing2);
  ModbusRTUServer.inputRegisterWrite(0x02,mytiming.timing3);
  ModbusRTUServer.poll();
  /*int masterStatus = ModbusRTUServer.coilRead(0x00);
  mystatus.stop = masterStatus &  1;
  mystatus.start = (masterStatus >> 1) &  1;
  mystatus.running = (masterStatus >> 2) &  1;
  mystatus.system = (masterStatus >> 3) &  1;*/
  mystatus.stop = ModbusRTUServer.coilRead(0x00);
  mystatus.start = ModbusRTUServer.coilRead(0x01);
  mystatus.system = ModbusRTUServer.coilRead(0x03);
  mytiming.timing1 = ModbusRTUServer.holdingRegisterRead(0x00);
  mytiming.timing2 = ModbusRTUServer.holdingRegisterRead(0x01);
  mytiming.timing3 = ModbusRTUServer.holdingRegisterRead(0x02);

}

void machineState(){
  machine_current_state = machine_next_state;
  switch(machine_current_state){
    case state_stop:
      if(mystatus.start){
        machine_next_state = state_motor_active;
        mystatus.current_system = mystatus.system;
        if(mystatus.current_system==0){
          pin_motor = pin_motor_1;
          pin_e1 = pin_e1_1;
          pin_e2 = pin_e2_1;
        }else{
          pin_motor = pin_motor_2;
          pin_e1 = pin_e1_2;
          pin_e2 = pin_e2_2;
        }
        next_time = millis() + mytiming.timing1*1000;
      }
      break;
    case state_motor_active:
      if(millis() >= next_time){
        machine_next_state = state_e1_active;
        next_time = millis() + mytiming.timing2*1000;
      }
      if(mystatus.stop)
        machine_next_state = state_stop;
      break;
    case state_e1_active:
      if(millis() >= next_time){
        machine_next_state = state_e2_active;
        next_time = millis() + mytiming.timing3*1000;
      }
      if(mystatus.stop)
        machine_next_state = state_stop;
      break;
    case state_e2_active:
      if(millis() >= next_time){
        machine_next_state = state_e2_deactive;
        next_time = millis() + mytiming.timing2*1000;
      }
      if(mystatus.stop)
        machine_next_state = state_stop;
      break;
    case state_e2_deactive:
      if(millis() >= next_time){
        machine_next_state = state_e1_deactive;
        next_time = millis() + mytiming.timing1*1000;
      }
      if(mystatus.stop)
        machine_next_state = state_stop;
      break;
    case state_e1_deactive:
      if(millis() >= next_time){
        machine_next_state = state_motor_deactive;
      }
      if(mystatus.stop)
        machine_next_state = state_stop;
      break;
    case state_motor_deactive:
      machine_next_state = state_stop;
      break;
    default:
      machine_next_state = state_stop;
      break;
  }
}

void machineActions(){
  switch(machine_current_state){
    case state_stop:
      digitalWrite(pin_motor_1,LOW);
      digitalWrite(pin_e1_1,LOW);
      digitalWrite(pin_e2_1,LOW);
      digitalWrite(pin_motor_2,LOW);
      digitalWrite(pin_e1_2,LOW);
      digitalWrite(pin_e2_2,LOW);
      mystatus.running = false;
      break;
    case state_motor_active:
        digitalWrite(pin_motor,HIGH);
        digitalWrite(pin_e1,LOW);
        digitalWrite(pin_e2,LOW);
        mystatus.running = true;
      break;
    case state_e1_active:
      digitalWrite(pin_motor,HIGH);
      digitalWrite(pin_e1,HIGH);
      digitalWrite(pin_e2,LOW);
        mystatus.running = true;
      break;
    case state_e2_active:
      digitalWrite(pin_motor,HIGH);
      digitalWrite(pin_e1,HIGH);
      digitalWrite(pin_e2,HIGH);
        mystatus.running = true;
      break;
    case state_e2_deactive:
      digitalWrite(pin_motor,HIGH);
      digitalWrite(pin_e1,HIGH);
      digitalWrite(pin_e2,LOW);
        mystatus.running = true;
      break;
    case state_e1_deactive:
      digitalWrite(pin_motor,HIGH);
      digitalWrite(pin_e1,LOW);
      digitalWrite(pin_e2,LOW);
        mystatus.running = true;
      break;
    case state_motor_deactive:
      digitalWrite(pin_motor,LOW);
      digitalWrite(pin_e1,LOW);
      digitalWrite(pin_e2,LOW);
        mystatus.running = true;
      break;
    default:
      digitalWrite(pin_motor_1,LOW);
      digitalWrite(pin_e1_1,LOW);
      digitalWrite(pin_e2_1,LOW);
      digitalWrite(pin_motor_2,LOW);
      digitalWrite(pin_e1_2,LOW);
      digitalWrite(pin_e2_2,LOW);
      break;
  }
}
